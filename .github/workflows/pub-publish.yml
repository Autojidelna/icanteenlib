# .github/workflows/publish.yml
name: Publish to pub.dev

on:
  pull_request:
    types: [closed]
    branches:
      - main

# Publish using custom workflow
jobs:
  create-tag:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # required to push the tag
    outputs:
      tag: ${{ steps.create-and-push-tag.outputs.tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch full history so we can tag

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1

      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create and push tag
        id: create-and-push-tag
        run: |
          TAG="v${{ steps.get_version.outputs.version }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  check-publishable:
    name: Check if should publish to pub.dev
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v4

      - name: Check publish_to field
        id: check
        run: |
          # Extract publish_to field
          PUBLISH_TO=$(grep '^publish_to:' pubspec.yaml | awk '{print $2}' | tr -d "'\"")

          echo "Found publish_to: '$PUBLISH_TO'"

          if [ -z "$PUBLISH_TO" ]; then
            echo "No publish_to field found — default is pub.dev"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          elif [ "$PUBLISH_TO" = "none" ]; then
            echo "publish_to is 'none' — skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "publish_to is not 'none' — will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Print result
        run: echo "should_publish=${{ steps.check.outputs.should_publish }}"

  publish:
    needs:
      - create-tag
      - check-publishable
    if: ${{ github.event.pull_request.merged == true && needs.check-publishable.outputs.should_publish == 'true' }}
    permissions:
      id-token: write # Required for authentication using OIDC
      contents: write # Required for writing to the release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract release notes
        id: extract-release-notes
        run: |
          # Use awk to extract lines until the second header
          FILE_CONTENTS=$(awk '/^## /{if(++n==2)exit} n>=1 {print}' CHANGELOG.md)

          # Escape newlines and set the output
          FILE_CONTENTS="${FILE_CONTENTS//'%'/'%25'}"
          FILE_CONTENTS="${FILE_CONTENTS//$'\n'/'%0A'}"
          FILE_CONTENTS="${FILE_CONTENTS//$'\r'/'%0D'}"

          echo "contents=$FILE_CONTENTS" >> GITHUB_OUTPUT

      - name: Update Release Description
        uses: softprops/action-gh-release@v1
        with:
          files: ''
          token: ${{ secrets.GITHUB_TOKEN }}
          body: ${{ steps.extract-release-notes.outputs.contents }}
          tag_name: ${{ needs.create-tag.outputs.tag }}

      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      - uses: dart-lang/setup-dart@v1

      - name: Install dependencies
        run: dart pub get

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: dart analyze --fatal-infos

      - name: Removing credentials
        run: rm -rf .env

      - name: Formatting for pub
        run: dart format .

      - name: Publish
        run: dart pub publish --force
